// firestore.rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Common functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.permissions.isAdmin == true;
    }
    
    function isCurrentUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function hasPermission(permission) {
      return isAuthenticated() && 
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.permissions[permission] == true ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.permissions.isAdmin == true);
    }
    
    // Users collection rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin();
      allow update: if isAdmin() || isCurrentUser(userId);
      allow delete: if isAdmin();
    }
    
    // Jobs collection rules
    match /jobs/{jobId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && hasPermission('canCreateJobs');
      allow update: if isAuthenticated() && (
        hasPermission('canEditJobs') || 
        resource.data.driverId == request.auth.uid
      );
      allow delete: if isAdmin();
    }
    
    // Also add rules for 'Jobs' collection with capital J (from your indexes)
    match /Jobs/{jobId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && hasPermission('canCreateJobs');
      allow update: if isAuthenticated() && (
        hasPermission('canEditJobs') || 
        resource.data.driverId == request.auth.uid
      );
      allow delete: if isAdmin();
    }
    
    // Customers collection rules
    match /customers/{customerId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && (
        hasPermission('canManageCustomers') || isAdmin()
      );
      allow delete: if isAdmin();
    }
    
    // Vehicles collection rules
    match /vehicles/{vehicleId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && (
        hasPermission('canManageVehicles') || isAdmin()
      );
      allow delete: if isAdmin();
    }
    
    // Vehicle Makes collection rules
    match /vehicleMakes/{makeId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && (
        hasPermission('canManageVehicles') || isAdmin()
      );
    }
    
    // Vehicle Models collection rules
    match /vehicleModels/{modelId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && (
        hasPermission('canManageVehicles') || isAdmin()
      );
    }
    
    // Documents collection rules (for user documents like licenses, certificates, etc.)
    match /documents/{documentId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        hasPermission('canManageDocuments') || 
        isAdmin()
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        hasPermission('canManageDocuments') || 
        isAdmin()
      );
      allow delete: if isAdmin() || hasPermission('canManageDocuments');
    }
    
    // Notifications collection rules
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && (hasPermission('canSendNotifications') || isAdmin());
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        hasPermission('canSendNotifications') || 
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        isAdmin()
      );
    }
    
    // Driver Notes collection rules
    match /driverNotes/{noteId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && (
        resource.data.authorId == request.auth.uid || isAdmin()
      );
    }
    
    // Expenses collection rules
    match /expenses/{expenseId} {
      allow read: if isAuthenticated() && (
        resource.data.driverId == request.auth.uid || 
        hasPermission('canApproveExpenses') || 
        isAdmin()
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        resource.data.driverId == request.auth.uid || 
        hasPermission('canApproveExpenses') || 
        isAdmin()
      );
      allow delete: if isAdmin();
    }
    
    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}