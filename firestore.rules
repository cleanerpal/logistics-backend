rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection - users can read/write their own profile
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null && 
        resource.data.role == 'driver' && 
        request.auth.token.permissions.canViewDrivers == true;
      allow read: if request.auth != null && 
        request.auth.token.permissions.isAdmin == true;
    }
    
    // Jobs collection
    match /jobs/{jobId} {
      // Admin can read/write all jobs
      allow read, write: if request.auth != null && 
        request.auth.token.permissions.isAdmin == true;
      
      // Users with canViewUnallocated can read unallocated jobs
      allow read: if request.auth != null && 
        request.auth.token.permissions.canViewUnallocated == true && 
        resource.data.status == 'unallocated';
      
      // Drivers can read/write their own jobs
      allow read, write: if request.auth != null && 
        resource.data.driverId == request.auth.uid;
      
      // Users with canAllocateJobs can update job allocation
      allow write: if request.auth != null && 
        request.auth.token.permissions.canAllocateJobs == true &&
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['driverId', 'status', 'allocatedAt', 'updatedAt', 'updatedBy', 'statusUpdatedAt']);
      
      // Users with canCreateJobs can create jobs
      allow create: if request.auth != null && 
        request.auth.token.permissions.canCreateJobs == true;
      
      // Users with canEditJobs can edit jobs
      allow update: if request.auth != null && 
        request.auth.token.permissions.canEditJobs == true;
    }
    
    // Vehicles collection
    match /vehicles/{vehicleId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        request.auth.token.permissions.canManageVehicles == true;
    }
    
    // Customers collection
    match /customers/{customerId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        request.auth.token.permissions.canManageCustomers == true;
    }
    
    // Expenses collection
    match /expenses/{expenseId} {
      // Users can read/write their own expenses
      allow read, write: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      
      // Admin and users with canApproveExpenses can read all
      allow read: if request.auth != null && 
        (request.auth.token.permissions.isAdmin == true ||
         request.auth.token.permissions.canApproveExpenses == true);
      
      // Users with canApproveExpenses can approve/reject
      allow update: if request.auth != null && 
        request.auth.token.permissions.canApproveExpenses == true &&
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['status', 'approvedBy', 'approvedAt', 'rejectionReason', 'updatedAt']);
    }
    
    // System collections (read-only for most users)
    match /settings/{document} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        request.auth.token.permissions.isAdmin == true;
    }
    
    match /userRoles/{roleId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        request.auth.token.permissions.isAdmin == true;
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      allow write: if request.auth != null && 
        request.auth.token.permissions.isAdmin == true;
      allow create: if request.auth != null;
    }
  }
}